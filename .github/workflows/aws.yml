# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-southeast-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECS_CLUSTER: nasgorsifudd-bank              # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ./github/workflows/nasgorsifudd-bank-task-revision4.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: nasgorsifudd-bank       # set this to the name of the container in the
                                               # containerDefinitions section of your task definition
  ECR_REPOSITORY: nasgorsifudd-bank          # set this to your Amazon ECR repository name
  ECS_SERVICE: nasgorsifudd-bank-service               # set this to your Amazon ECS service name

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          BEC_NAME: nasgorsifudd-bank
        run: |
          echo "${{ secrets.AWS_PEM }}" | base64 -d > ap-southeast-1-bundle.pem
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build \
            --build-arg PEM_FILE=ap-southeast-1-bundle.pem \
            --build-arg "DB_HOST=${{ secrets.DB_HOST }}" \
            --build-arg "DB_NAME=${{ secrets.DB_NAME }}" \
            --build-arg "DB_USERNAME=${{ secrets.DB_USERNAME }}" \
            --build-arg "DB_PARAMS=${{ secrets.DB_PARAMS }}" \
            --build-arg "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" \
            --build-arg "DB_PORT=${{ secrets.DB_PORT }}" \
            --build-arg "DB_USERNAME=${{ secrets.DB_USERNAME }}" \
            --build-arg "JWT_SECRET=${{ secrets.JWT_SECRET }}" \
            --build-arg "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" \
            --build-arg "S3_ID=${{ secrets.S3_ID }}" \
            --build-arg "S3_REGION=${{ secrets.S3_REGION }}" \
            --build-arg "S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}" \
            --build-arg "BCRYPT_SALT=${{ secrets.BCRYPT_SALT }}" \
            -t $ECR/$BEC_NAME:$IMAGE_TAG --file ./dockerfile/backend/Dockerfile .
          docker push $ECR/$BEC_NAME:$IMAGE_TAG
          echo "image=$ECR/$BEC_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build DB Connection String
        run: |
          echo "CONN_STRING=postgres://${{ secrets.DB_USERNAME }}:${{ secrets.DB_PASSWORD}}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}?${{ secrets.DB_PARAMS }}" >> $GITHUB_ENV
          echo $CONN_STRING
      
      - name: Migrate DB
        run: |
          go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
          migrate -database $(echo $CONN_STRING) -path common/db/migrations up

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
